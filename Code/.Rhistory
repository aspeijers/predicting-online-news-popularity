actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
dim(combined[,c(-1,-2)])
dim(combined)
varDiff1 <- vector() # vectors of interaction terms to include (term1 in varDiff1 and term2 in varDiff2)
varDiff2 <- vector()
combined_updated1 <- combined
X_test_updated1 <- X_test
combined_updated2 <- combined
X_test_updated2 <- X_test
for ( i in 1:(length(combinedCont)-1) ) {
for ( j in i:(length(combinedCont)-1) ) {
interact <- combinedCont[,i]*combinedCont[,j]
XX.anov <- aov( interact ~ combinedCont$popularity )
if (sum( TukeyHSD(XX.anov)[[1]][,4] < 0.05 ) == 10) {     # if null is NOT accepted if (p-value < 0.05) (ie means are not equal at significance level 5%),
varDiff1 <- c(varDiff1, featuresCont[i])
varDiff2 <- c(varDiff2, featuresCont[j])                # interaction term may help us discriminate between categories.
combined_updated1 <- data.frame( cbind( interact, combined_updated1 ) )
X_test_updated1 <- data.frame( cbind( (X_testCont[,i]*X_testCont[,j]), X_test_updated1 ) )
combined_updated2 <- data.frame( cbind( interact, combined_updated1[,c(-i, -j)] ) )
X_test_updated2 <- data.frame( cbind( (X_testCont[,i]*X_testCont[,j]), X_test_updated1[,c(-i,-j)] ) )
}
}
}
dim(combined_updated2)
dim(combined_updated1)
varDiff1
varDiff2
?which
which(combined %in% varDiff1)
which(names(combined) %in% varDiff1)
which((names(combined) %in% varDiff1)) & (names(combined) %in% varDiff2))
which(  (names(combined) %in% varDiff1) & (names(combined) %in% varDiff2)  )
which(  (names(combined) %in% varDiff1) OR (names(combined) %in% varDiff2)  )
which(  (names(combined) %in% varDiff1) xor (names(combined) %in% varDiff2)  )
which(  (names(combined) %in% varDiff1) | (names(combined) %in% varDiff2)  )
combined_updated2 <- combined_updated1[, -(which(  (names(combined_updated1) %in% varDiff1) | (names(combined_updated1) %in% varDiff2)  ))]
length(which(  (names(combined) %in% varDiff1) | (names(combined) %in% varDiff2)  )  )
length(combined_updated1)
89-24
length(combined_updated2)
X_test_updated2 <- X_test_updated1[, -(which(  (names(X_test_updated1) %in% varDiff1) | (names(X_test_updated1) %in% varDiff2)  ))]
length(X_test_updated2)
length(X_test_updated1)
varDiff1 <- vector() # vectors of interaction terms to include (term1 in varDiff1 and term2 in varDiff2)
varDiff2 <- vector()
combined_updated1 <- combined
X_test_updated1 <- X_test
combined_updated2 <- combined
X_test_updated2 <- X_test
for ( i in 1:(length(combinedCont)-1) ) {
for ( j in i:(length(combinedCont)-1) ) {
interact <- combinedCont[,i]*combinedCont[,j]
XX.anov <- aov( interact ~ combinedCont$popularity )
if (sum( TukeyHSD(XX.anov)[[1]][,4] < 0.05 ) == 10) {     # if null is NOT accepted if (p-value < 0.05) (ie means are not equal at significance level 5%),
varDiff1 <- c(varDiff1, featuresCont[i])
varDiff2 <- c(varDiff2, featuresCont[j])                # interaction term may help us discriminate between categories.
combined_updated1 <- data.frame( cbind( interact, combined_updated1 ) )
X_test_updated1 <- data.frame( cbind( (X_testCont[,i]*X_testCont[,j]), X_test_updated1 ) )
}
}
}
combined_updated2 <- combined_updated1[, -(which(  (names(combined_updated1) %in% varDiff1) | (names(combined_updated1) %in% varDiff2)  ))]
X_test_updated2 <- X_test_updated1[, -(which(  (names(X_test_updated1) %in% varDiff1) | (names(X_test_updated1) %in% varDiff2)  ))]
dim(combined_updated2)
dim(combined_updated1)
89-65
dim(X_test_updated1)
dim(X_test_updated2)
write.csv(combined_updated1, file = "../data/XX_anov_train1.csv")
write.csv(X_test_updated1, file = "../data/XX_anov_test1.csv")
write.csv(combined_updated2, file = "../data/XX_anov_train2.csv")
write.csv(X_test_updated2, file = "../data/XX_anov_test2.csv")
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/data")
library(h2o)
h2o.init(nthreads = -1)
path1 <- "XX_anov_train2.csv"
path2 <- "XX_anov_test2.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
training.hex$popularity <- as.factor(training.hex$popularity)
RF1 <- h2o.randomForest(y = 90, x = 1:89, training_frame = training.hex, ntrees = 1000, max_depth = 150)
print(RF1)
dim(training.hex)
names(combined_updated2)
RF1 <- h2o.randomForest(y = 66, x = 1:65, training_frame = training.hex, ntrees = 1000, max_depth = 150)
print(RF1)
prediction <- h2o.predict(RF1, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
varDiff1.all <- vector()
varDiff2.all <- vector()
combined_updated4 <- combined
X_test_updated4 <- X_test
for ( i in 1:(length(combined)-1) ) {
for ( j in i:(length(combined)-1) ) {
interact.all <- combined[,i]*combined[,j]
XX.anov.all <- aov( interact ~ combined$popularity )
if (sum( TukeyHSD(XX.anov.all)[[1]][,4] < 0.05 ) == 10) {     # if null is NOT accepted if (p-value < 0.05) (ie means are not equal at significance level 5%),
varDiff1.all <- c(varDiff1.all, features[i])
varDiff2.all <- c(varDiff2.all, features[j])                # interaction term may help us discriminate between categories.
combined_updated4 <- data.frame( cbind( interact.all, combined_updated3 ) )
X_test_updated4 <- data.frame( cbind( (X_test[,i]*X_test[,j]), X_test_updated3 ) )
}
}
}
varDiff1 <- vector() # vectors of interaction terms to include (term1 in varDiff1 and term2 in varDiff2)
varDiff2 <- vector()
combined_updated1 <- combined
X_test_updated1 <- X_test
combined_updated2 <- combined
X_test_updated2 <- X_test
for ( i in 1:(length(combinedCont)-1) ) {
for ( j in i:(length(combinedCont)-1) ) {
interact <- combinedCont[,i]*combinedCont[,j]
XX.anov <- aov( interact ~ combinedCont$popularity )
if (sum( TukeyHSD(XX.anov)[[1]][,4] < 0.05 ) == 10) {     # if null is NOT accepted if (p-value < 0.05) (ie means are not equal at significance level 5%),
varDiff1 <- c(varDiff1, featuresCont[i])
varDiff2 <- c(varDiff2, featuresCont[j])                # interaction term may help us discriminate between categories.
combined_updated1 <- data.frame( cbind( interact, combined_updated1 ) )
interact <- X_testCont[,i]*X_testCont[,j]
X_test_updated1 <- data.frame( cbind( interact, X_test_updated1 ) )
}
}
}
combined_updated2 <- combined_updated1[, -(which(  (names(combined_updated1) %in% varDiff1) | (names(combined_updated1) %in% varDiff2)  ))]
X_test_updated2 <- X_test_updated1[, -(which(  (names(X_test_updated1) %in% varDiff1) | (names(X_test_updated1) %in% varDiff2)  ))]
write.csv(combined_updated1, file = "../data/XX_anov_train1.csv")
write.csv(X_test_updated1, file = "../data/XX_anov_test1.csv")
write.csv(combined_updated2, file = "../data/XX_anov_train2.csv")
write.csv(X_test_updated2, file = "../data/XX_anov_test2.csv")
path1 <- "XX_anov_train1.csv"
path2 <- "XX_anov_test1.csv"
path3 <- "labels.csv"
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/data")
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
training.hex$popularity <- as.factor(training.hex$popularity)
dim(training.hex)
RF1 <- h2o.randomForest(y = 90, x = 1:89, training_frame = training.hex, ntrees = 1000, max_depth = 150)
print(RF1)
prediction <- h2o.predict(RF1, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF1
install.packages("randomForest")
library(randomForest)
?randomForest
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/code")
data <- read.csv("../data/training70.csv", header = TRUE)
X <- data[,5:62]
popularity <- data[,63]
combined <- cbind(X, popularity)
combined$popularity <- as.factor(combined$popularity)
features <- names(X)
popularity <- as.factor(data[,63])
data <- read.csv("../data/test30.csv", header = TRUE)
X_test <- data[,5:62]
combined <- combined[combined$n_unique_tokens<=1, ]
combined <- combined[combined$n_non_stop_words<=1, ]
combined <- combined[combined$n_non_stop_unique_tokens<=1, ]
RFbase1 <- randomForest(popularity ~ ., data=combined, ntree=200, importance=TRUE, do.trace=TRUE )
?predict
prediction <- predict(RFbase1, newdata=X_test)
class(prediction)
pred <- as.numeric(prediction)
dim(data)
data_test <- read.csv("../data/test30.csv", header = TRUE)
X_test <- data[,5:62]
popularity_test <- as.factor(data[,63])
prediction <- predict(RFbase1, newdata=X_test)
data_test <- read.csv("../data/test30.csv", header = TRUE)
X_test <- data_test[,5:62]
popularity_test <- data_test[,63]
prediction <- predict(RFbase1, newdata=X_test)
pred <- as.numeric(prediction)
head(pred)
percent_correct <- mean(pred == popularity_test)
percent_correct
names(data)
data <- read.csv("../data/training70.csv", header = TRUE)
X <- data[,4:62]
popularity <- as.factor(data[,63])
combined <- cbind(X, popularity)
combined$popularity <- as.factor(combined$popularity)
features <- names(X)
## Read in test data
data_test <- read.csv("../data/test30.csv", header = TRUE)
X_test <- data_test[,4:62]
popularity_test <- data_test[,63]
combined <- combined[combined$n_unique_tokens<=1, ]
combined <- combined[combined$n_non_stop_words<=1, ]
combined <- combined[combined$n_non_stop_unique_tokens<=1, ]
RFbase1 <- randomForest(popularity ~ ., data=combined, ntree=200, importance=TRUE, do.trace=TRUE )
prediction <- predict(RFbase1, newdata=X_test)
pred <- as.numeric(prediction)
percent_correct <- mean(pred == popularity_test)
percent_correct
varImpPlot(RFbase1)
RFbase2 <- randomForest(popularity ~ ., data=combined, ntree=100, importance=TRUE, do.trace=TRUE )
testData <- read.csv("../data/news_popularity_test.csv")
head(testData)
prediction <- predict(RFbase2, newdata=X_test)
pred <- as.numeric(prediction)
percent_correct <- mean(pred == popularity_test)
percent_correct
dim(combined)
submission <- testData$id
dim(X_test)
RFbase1 <- randomForest(combined[,1:59], as.factor(combined[,60]), ntree=200, importance=TRUE, do.trace=TRUE )
prediction <- predict(RFbase1, newdata=X_test)
pred <- as.numeric(prediction)
percent_correct <- mean(pred == popularity_test)
percent_correct
submission <- testData$id
head(submission)
submission <- data.frame( id= testData$id )
head(submission)
names(testData)
submission$popularity <- predict(RF1, newdata=testData[,3:61])
submission$popularity <- predict(RFbase1, newdata=testData[,3:61])
head(submission)
?write.csv
write.csv(submission, file="../data/submission_RFbase1.csv")
write.csv(submission, file="../Submissions/submission_RFbase1.csv")
write.csv(submission, file="../Submissions/submission_RFbase1.csv", row.names=FALSE)
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/code")
data <- read.csv("../data/training70.csv", header = TRUE)
head(names(data))
data <- read.csv("../data/training70.csv", header = TRUE)
X <- data[,4:62]
popularity <- data[,63]
combined <- cbind(X, popularity)
combined$popularity <- as.factor(combined$popularity)
features <- names(X)
## Read in test data
data <- read.csv("../data/test30.csv", header = TRUE)
X_test <- data[,4:62]
## Cleaning
combined <- combined[combined$n_unique_tokens<=1, ]
combined <- combined[combined$n_non_stop_words<=1, ]
combined <- combined[combined$n_non_stop_unique_tokens<=1, ]
## Class of each feature - continuous, count, logical
varType <- rep( NA, length(X) )
for ( i in 1:length(X) ) {
type <- class( X[,i] )
if (type=="int") {
if (length(unique(X[,i])) > 2) {
varType[i] <- "count"
} else {
varType[i] <- "binary"
}
} else {
varType[i] <- type
}
}
combinedCont <- cbind( combined[,(varType=="numeric")], popularity=as.factor(combined$popularity))
X_testCont <- X_test[ ,(varType=="numeric")]
featuresCont <- names(combinedCont)
varDiff1 <- vector() # vectors of interaction terms to include (term1 in varDiff1 and term2 in varDiff2)
varDiff2 <- vector()
combined_updated1 <- combined
X_test_updated1 <- X_test
combined_updated2 <- combined
X_test_updated2 <- X_test
for ( i in 1:(length(combinedCont)-1) ) {
for ( j in i:(length(combinedCont)-1) ) {
interact <- combinedCont[,i]*combinedCont[,j]
XX.anov <- aov( interact ~ combinedCont$popularity )
if (sum( TukeyHSD(XX.anov)[[1]][,4] < 0.05 ) == 10) {     # if null is NOT accepted if (p-value < 0.05) (ie means are not equal at significance level 5%),
varDiff1 <- c(varDiff1, featuresCont[i])
varDiff2 <- c(varDiff2, featuresCont[j])                # interaction term may help us discriminate between categories.
combined_updated1 <- data.frame( cbind( interact, combined_updated1 ) )
interact <- X_testCont[,i]*X_testCont[,j]
X_test_updated1 <- data.frame( cbind( interact, X_test_updated1 ) )
}
}
}
combined_updated2 <- combined_updated1[, -(which(  (names(combined_updated1) %in% varDiff1) | (names(combined_updated1) %in% varDiff2)  ))]
X_test_updated2 <- X_test_updated1[, -(which(  (names(X_test_updated1) %in% varDiff1) | (names(X_test_updated1) %in% varDiff2)  ))]
write.csv(combined_updated1, file = "../data/XX_anov_train1.csv")
write.csv(X_test_updated1, file = "../data/XX_anov_test1.csv")
write.csv(combined_updated2, file = "../data/XX_anov_train2.csv")
write.csv(X_test_updated2, file = "../data/XX_anov_test2.csv")
install.packages("devtools")
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/More Hari")
library(h2o)
h2o.init(nthreads = -1)
dim(labels)
length(labels.hex)
dim(labels.hex)
path1 <- "finalstretch_train.csv"
path2 <- "finalstretch_test.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
training.hex$popularity <- as.factor(training.hex$popularity)
dim(training.hex)
names(training.hex)
RF1 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 150)
print(RF1)
prediction <- h2o.predict(RF1, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF2 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100)
?h2o.randomForest
prediction <- h2o.predict(RF2, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF1 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 150, seed=12345)
prediction <- h2o.predict(RF2, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
prediction <- h2o.predict(RF1, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF2 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, seed=12345)
prediction <- h2o.predict(RF1, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
prediction <- h2o.predict(RF2, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF3 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 10, seed=12345)
prediction <- h2o.predict(RF3, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
h2o.init(nthreads = -1)
prediction <- h2o.predict(RF3, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF3 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 10, seed=12345)
RF1 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 150, seed=12345)
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/data")
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
RF3 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 10, seed=12345)
prediction <- h2o.predict(RF3, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
dim(labels)
dim(labels.hex)
path1 <- "finalstretch_train.csv"
path2 <- "finalstretch_test.csv"
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/More Hari")
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
training.hex$popularity <- as.factor(training.hex$popularity)
RF3 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 10, seed=12345)
prediction <- h2o.predict(RF3, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF4 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 15, seed=12345)
prediction <- h2o.predict(RF4, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF5 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 18, seed=12345)
prediction <- h2o.predict(RF5, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF6 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 17, seed=12345)
prediction <- h2o.predict(RF6, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF7 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 16, seed=12345)
prediction <- h2o.predict(RF7, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF8 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 14, seed=12345)
prediction <- h2o.predict(RF8, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
prediction <- h2o.predict(RF4, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
RF9 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 13, seed=12345)
prediction <- h2o.predict(RF9, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
path1 <- "train_share.csv"
path2 <- "test_share.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
training.hex$popularity <- as.factor(training.hex$popularity)
RF4 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 15, seed=12345)
dim(training.hex)
names(training.hex)
RF4 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 15, seed=12345)
prediction <- h2o.predict(RF4, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
path2 <- "finalstretch_test.csv"
path1 <- "finalstretch_train.csv"
training.hex$popularity <- as.factor(training.hex$popularity)
RF4 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 15, seed=12345)
RF4 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 15, seed=12345)
h2o.init(nthreads = -1)
path1 <- "finalstretch_train.csv"
path2 <- "finalstretch_test.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex", sep=",")
test.hex <- h2o.uploadFile(path =path2, destination_frame = "test.hex", sep=",")
names(training.hex)
dim(labels.hex)
training.hex$popularity <- as.factor(training.hex$popularity)
RF4 <- h2o.randomForest(y = 52, x = 2:51, training_frame = training.hex, ntrees = 1000, max_depth = 100, mtries = 15, seed=12345)
prediction <- h2o.predict(RF4, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
head(prediction)
head(pred)
head(actual)
head(labels.hex)
prediction <- h2o.predict(RF4, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- mean(pred[,1] == actual)
percent_correct
head(actual)
actual
head(as.data.frame(labels.hex))
class(labels.hex)
path3 <- "labels.csv"
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/Data")
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
actual <- as.data.frame(labels.hex)[,2]
head(actula)
head(actual)
percent_correct <- mean(pred[,1] == actual)
percent_correct
realTest.hex <- h2o.uploadFile(path =path4, destination_frame = "realTest.hex", sep=",")
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/code")
path4 <- read.csv("../data/news_popularity_test.csv")
realTest.hex <- h2o.uploadFile(path =path4, destination_frame = "realTest.hex", sep=",")
path4 <- "news_popularity_test.csv"
realTest.hex <- h2o.uploadFile(path =path4, destination_frame = "realTest.hex", sep=",")
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/data")
path4 <- "news_popularity_test.csv"
realTest.hex <- h2o.uploadFile(path =path4, destination_frame = "realTest.hex", sep=",")
submission <- data.frame( id= testData$id )
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/More Hari")
head(training.hex$popularity)
pwd()
wd
swd
gwd()
gwd
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/More Hari")
path4 <- "test_accuracyfn.csv"
realTest.hex <- h2o.uploadFile(path =path4, destination_frame = "realTest.hex", sep=",")
submission <- data.frame( id= realTest.hex$id )
head(realTest.hex)
head(realTest.hex$id)
class(realTest.hex$id)
submission <- data.frame( id= realTest.hex$id )
submission <- data.frame( id= as.data.frame(realTest.hex$id) )
head(submission)
class(submission)
submission$popularity <- as.data.frame( h2o.predict(RF4, newdata=testData[,2:51]) )[,1]
dim(realTest.hex)
submission$popularity <- as.data.frame( h2o.predict(RF4, newdata=testData[,3:52]) )[,1]
prediction <- h2o.predict(RF4, newdata=testData[,3:52])
submission$popularity <- as.data.frame( h2o.predict(RF4, newdata=realTest.hex[,3:52]) )[,1]
head(submission)
write.csv(submission, file="../Submissions/submission_RFH2o1.csv", row.names=FALSE)
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/Code")
write.csv(submission, file="../Submissions/submission_RFH2o1.csv", row.names=FALSE)
