names(training.hex)
RF1 <- h2o.randomForest(y = 63, x = 5:62, training_frame = training.hex, ntrees = 500, max_depth = 100)
print(RF1)
h2o.varimp(RF1)
str(h2o.varimp(RF1))
varImportance <- h2o.varimp(RF1)
varImportance$variable
58*.8
top80pc <- varImportance$variable[1:46]
top80pc
RF2 <- h2o.randomForest(y = 63, x = which(names(training.hex) %in% top80pc), training_frame = training.hex, ntrees = 500, max_depth = 100)
print(RF2)
varImportance2 <- h2o.varimp(RF2)
varImportance2
top80pc <- varImportance$variable[1:40]
.7*58
top70pc <- varImportance$variable[1:40]
RF2 <- h2o.randomForest(y = 63, x = which(names(training.hex) %in% top70pc), training_frame = training.hex, ntrees = 500, max_depth = 100)
print(RF2)
.9*58
top90pc <- varImportance$variable[1:52]
RF2 <- h2o.randomForest(y = 63, x = which(names(training.hex) %in% top90pc), training_frame = training.hex, ntrees = 500, max_depth = 100)
print(RF2)
myframe = h2o.createFrame(rows = 20, cols = 5,
seed = -12301283, randomize = TRUE, value = 0,
categorical_fraction = 0.8, factors = 10, real_range = 1,
integer_fraction = 0.2, integer_range = 10,
binary_fraction = 0, binary_ones_fraction = 0.5,
missing_fraction = 0.2,
response_factors = 1)
dim(myframe)
# Turn integer column into a categorical
myframe[,5] <- as.factor(myframe[,5])
head(myframe, 20)
head(myframe)
# Create pairwise interactions
pairwise <- h2o.interaction(myframe, destination_frame = 'pairwise',
factors = list(c(1,2),c("C2","C3","C4")),
pairwise=TRUE, max_factors = 10, min_occurrence = 1)
class(pairwise)
dim(pairwise)
head(pairwise)
?h2o.interaction
pairwise <- h2o.interaction(myframe, destination_frame = 'pairwise',
factors = list(c(1,2),c("C2","C3","C4")),
pairwise=TRUE, max_factors = 10, min_occurrence = 1)
head(pairwise)
pairwise <- h2o.interaction(myframe, destination_frame = 'pairwise',
factors = list(c(1,2),c("C1","C3","C4")),
pairwise=TRUE, max_factors = 10, min_occurrence = 1)
head(pairwise)
pairwise <- h2o.interaction(myframe, destination_frame = 'pairwise',
factors = list(c(1,2),c("C1","C2","C3")),
pairwise=TRUE, max_factors = 10, min_occurrence = 1)
head(pairwise)
pairwise <- h2o.interaction(myframe, destination_frame = 'pairwise',
factors = list(c(1,2),c("C1","C2")),
pairwise=TRUE, max_factors = 10, min_occurrence = 1)
head(pairwise)
head(pairwise, 20)
h2o.levels(pairwise,2)
pairwise <- h2o.interaction(myframe, destination_frame = 'pairwise',
factors = list(c(1,2),c("C2","C3","C4")),
pairwise=TRUE, max_factors = 10, min_occurrence = 1)
head(pairwise, 20)
h2o.levels(pairwise,2)
?h2o.levels
higherorder <- h2o.interaction(myframe, destination_frame = 'higherorder', factors = c(1,2,3,4,5),
pairwise=FALSE, max_factors = 10000, min_occurrence = 1)
head(higherorder, 20)
interactions <- h2o.interaction(training.hex, destination_frame = 'interactions',
factors = c("weekday_is_monday","weekday_is_tuesday")),
pairwise=FALSE, max_factors = 2, min_occurrence = 1)
interactions <- h2o.interaction(training.hex, destination_frame = 'interactions',
factors = c("weekday_is_monday","weekday_is_tuesday"),
pairwise=FALSE, max_factors = 2, min_occurrence = 1)
training.hex$weekday_is_monday <- as.factor(training.hex$weekday_is_monday)
training.hex$weekday_is_monday <- as.factor(training.hex$weekday_is_monday)
training.hex$weekday_is_tuesday <- as.factor(training.hex$weekday_is_tuesday)
interactions <- h2o.interaction(training.hex, destination_frame = 'interactions',
factors = c("weekday_is_monday","weekday_is_tuesday"),
pairwise=FALSE, max_factors = 2, min_occurrence = 1)
head(interactions)
setwd("/home/max/Escritorio/Data Science/2nd term/Adv. Computational Methods/predicting-online-news-popularity/Data")
library(h2o)
h2o.init(nthreads = -1)
path1 <- "train_trial.csv.csv"
path2 <- "test_trial.csv"
path3 <- "labels.csv"
articles.hex <- h2o.uploadFile(path = path1, destination_frame = "articles.hex" )
path1 <- "train_trial.csv"
articles.hex <- h2o.uploadFile(path = path1, destination_frame = "articles.hex" )
r <- h2o.runif(articles.hex)
training.hex <- articles.hex[r  < 0.7,]
validation.hex <- articles.hex[r  >= 0.7,]
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex") #labels of test data
training.hex$popularity <- as.factor(training.hex$popularity)
dim(training.hex)
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=6, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
training.gbm@model$training_metrics
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
?h2o.gbm
ntrees_opt <- c(5,25,50,100)
maxdepth_opt <- c(2,5,15,35)
learnrate_opt <- c(0.001, 0.05, 0.1, 0.2)
hyper_parameters <- list(ntrees=ntrees_opt, max_depth=maxdepth_opt, learn_rate=learnrate_opt)
grid <- h2o.grid("gbm", hyper_params = hyper_parameters, y = 63, x = 5:62,
distribution="multinomial", training_frame= training.hex,
validation_frame=validation.hex )
grid <- h2o.grid("gbm", hyper_params = hyper_parameters, y = 30, x = 2:29,
distribution="multinomial", training_frame= training.hex,
validation_frame=validation.hex )
grid
?lapply
grid_models <- lapply(grid@model_ids, function(model_id) {model = h2o.getModel(model_id)})
dim(grid_models)
class(grid_models)
for (i in 1:length(grid_models)) {
print(sprintf("auc: %f", h2o.auc(grid_models[[i]])))
}
length(grid_models)
i = 1
h2o.auc(grid_models[[i]])
?h2o.auc
grid_models[[1]]
grid_models[[1]]@model$training_metrics
grid_models[1]
?h2o.grid
grid <- h2o.grid("gbm", hyper_params = hyper_parameters, y = 30, x = 2:29,
distribution="multinomial", training_frame= training.hex )
grid
summary(grid)
grid_models <- lapply(grid@model_ids, function(model_id) {model = h2o.getModel(model_id)})
grid_models[[1]]@model$scoring_history$training_classification_error
grid_models[[1]]
grid_models[[1]]@model
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=6, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
### GBM
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=5,
max_depth=35, min_rows= 20, learn_rate=0.001,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
print(training.gbm)
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=125,
max_depth=35, min_rows= 20, learn_rate=0.001,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=200,
max_depth=5, min_rows= 20, learn_rate=0.001,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=5, min_rows= 20, learn_rate=0.001,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=10, min_rows= 20, learn_rate=0.001,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
path1 <- "train_trial.csv"
path2 <- "test_trial.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex" )
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
training.hex$popularity <- as.factor(training.hex$popularity)
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=10, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=285,
max_depth=5, min_rows= 20, learn_rate=0.001,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=300,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=295,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm@model$training_metrics
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=c(5,25,50,100), min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.02,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.009,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=6, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=4, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=300,
max_depth=4, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=320,
max_depth=4, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=400,
max_depth=4, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
path1 <- "training70.csv.csv"
path2 <- "test30.csv.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex" )
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
setwd("/home/max/Escritorio/Data Science/2nd term/Adv. Computational Methods/predicting-online-news-popularity/Data")
path1 <- "training70.csv.csv"
path2 <- "test30.csv.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex" )
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
path1 <- "training70.csv"
path2 <- "test30.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex" )
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
training.hex$popularity <- as.factor(training.hex$popularity)
training.gbm <- h2o.gbm(y=30, x=2:29, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
dim(training.hex)
path1 <- "train_result.csv"
path2 <- "test_result.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex" )
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
training.hex$popularity <- as.factor(training.hex$popularity)
dim(training.hex)
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=290,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=285,
max_depth=5, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=285,
max_depth=10, min_rows= 20, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=285,
max_depth=6, min_rows= 10, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=290,
max_depth=6, min_rows= 10, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=295,
max_depth=6, min_rows= 10, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
prediction
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/Data")
h2o.init(nthreads = -1)
path1 <- "train_result.csv"
path2 <- "test_result.csv"
path3 <- "labels.csv"
training.hex <- h2o.uploadFile(path = path1, destination_frame = "training.hex" )
test.hex <- h2o.uploadFile(path = path2, destination_frame = "test.hex" )
labels.hex <- h2o.uploadFile(path = path3, destination_frame = "labels.hex")
training.hex$popularity <- as.factor(training.hex$popularity)
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=285,
max_depth=6, min_rows= 10, learn_rate=0.01,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
prediction[,3]
prediction
ntrees_opt <- c(5,25,50,100)
maxdepth_opt <- c(2,5,15,35)
learnrate_opt <- c(0.001, 0.05, 0.1, 0.2)
hyper_parameters <- list(ntrees=ntrees_opt, max_depth=maxdepth_opt, learn_rate=learnrate_opt)
grid <- h2o.grid("gbm", hyper_params = hyper_parameters, y = 30, x = 2:29,
distribution="multinomial", training_frame= training.hex )
grid
grid <- h2o.grid("gbm", hyper_params = hyper_parameters, y = 36, x = 2:35,
distribution="multinomial", training_frame= training.hex )
grid
grid@model_ids
class(grid@model_ids)
grid@model_ids[[1]]
model_name <- grid@model_ids[[1]]
prediction <- h2o.predict(model_name, newdata=test.hex)
grid_models <- lapply(grid@model_ids, function(model_id) {model = h2o.getModel(model_id)})
prediction <- h2o.predict(grid_models[[1]], newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
percent_correct <- mean(pred[,1] == actual)
percent_correct
accuracy <- rep(NA, length(grid_models))
for (i in 1:length(grid_models)) {
prediction <- h2o.predict(grid_models[[i]], newdata=test.hex)
pred <- as.data.frame(prediction)
accuracy[i] <- mean(pred[,1] == actual)
}
accuracy
max(accuracy)
which.max(accuracy)
grid_models[[13]]
grid
training.gbm <- h2o.gbm(y=36, x=2:35, training_frame= training.hex, ntrees=100,
max_depth=5, min_rows= 10, learn_rate=0.05,
distribution="multinomial", nbins=1024)
prediction <- h2o.predict(training.gbm, newdata=test.hex)
pred <- as.data.frame(prediction)
actual <- as.data.frame(labels.hex)[,2]
percent_correct <- sum(pred[,1] == actual) / length(actual)
percent_correct
setwd("~/Desktop/BGSE/AdvancedCompMethods/Project/predicting-online-news-popularity/code")
data <- read.csv("../data/training70.csv", header = TRUE)
X <- data[,5:62]
popularity <- data[,63]
combined <- cbind(X, popularity)
names(combined)
?plot
i = 1
j = 2
ggplot( data=combined, aes(x=names(combined)[i], y=names(combined)[j], z=popularity) ) +
geom_point(data=dataset, size=2, aes(x=x1, y=x2, z=y, colour=as.factor(dataset$y))) +
scale_colour_manual("Training points", values=c("blue", "red")) +
ggtitle("Decision boundaries for kNN") +
theme_bw()
library(ggplot2)
ggplot( data=combined, aes(x=names(combined)[i], y=names(combined)[j], z=popularity) ) +
geom_point(data=dataset, size=2, aes(x=x1, y=x2, z=y, colour=as.factor(dataset$y))) +
scale_colour_manual("Training points", values=c("blue", "red")) +
ggtitle("Decision boundaries for kNN") +
theme_bw()
ggplot( data=combined, aes(x=names(combined)[i], y=names(combined)[j], z=popularity) ) +
geom_point(data=combined, size=2, aes(x=names(combined)[i], y=names(combined)[j], z=popularity, colour=as.factor(combined$popularity))) +
scale_colour_manual("Cat") +
ggtitle("Decision boundaries for kNN") +
theme_bw()
ggplot( data=combined, aes(x=names(combined)[i], y=names(combined)[j], z=popularity) ) +
geom_point(data=combined, size=2, aes(x=names(combined)[i], y=names(combined)[j], z=popularity, colour=as.factor(combined$popularity))) +
ggtitle("Decision boundaries for kNN") +
theme_bw()
names(combined)
ggplot( data=combined, aes(x=n_tokens_title, y=n_tokens_content, z=popularity) ) +
geom_point(data=combined, size=2, aes(x=n_tokens_title, y=n_tokens_content, z=popularity, colour=as.factor(combined$popularity))) +
ggtitle("Decision boundaries for kNN") +
theme_bw()
?scale_color_manual
names(combined[,1])
names(combined[1])
ggplot( data=combined, aes(x=names(combined[i]), y=names(combined[j]), z=popularity) ) +
geom_point(data=combined, size=2, aes(x=names(combined[i]), y=names(combined[j]), z=popularity, colour=as.factor(combined$popularity))) +
scale_colour_manual("Cat") +
ggtitle("Decision boundaries for kNN") +
theme_bw()
ggplot( data=combined, aes(x=names(combined[i]), y=names(combined[j]), z=popularity) ) +
geom_point(data=combined, size=2, aes(x=names(combined[i]), y=names(combined[j]), z=popularity, colour=as.factor(combined$popularity))) +
ggtitle("Decision boundaries for kNN") +
theme_bw()
names(combined[i])
names(combined[j])
- \usepackage{dsfont}
\mathds{P}(X=x|Y=1) = \dfrac{\mathds{P}(Y=1|X=x)\mathds{P}(X=x)}{\mathds{P}(Y=1)}
